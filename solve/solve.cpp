#include <iostream>
#include <sudoku.h>

const size_t sz=9;

int
main()
{
    const char* tests[]=
    {
	"000" "079" "065"
	"000" "003" "002"
	"005" "060" "093"
	
	"340" "050" "106"
	"000" "000" "000"
	"608" "020" "059"
	
	"950" "010" "600"
	"700" "600" "000"
	"820" "390" "000",
	"7....9.....134..6...2.8...4.83......4..9.7..3......49.3...6.1...2..948.....1....6",
	"8.3..4..5.....7......58...241....2....7.9.8....8....419...35......9.....1..6..9.7",
	".......12....35......6...7.7.....3.....4..8..1...........12.....8.....4..5....6..",
	"016400000200009000400000062070230100100000003003087040960000005000800007000006820",
	"150000000002000000004360007006024050000050000030190800700016400000000300000000018",
	"140200030360000000000080407006400020000030000050008600704090000000000094090005012",
	".......12....35......6...7.7.....3.....4..8..1...........12.....8.....4..5....6..",
	"...28.94.1.4...7......156.....8..57.4.......8.68..9.....196......5...8.3.43.28...",
	"102004070000902800009003004000240006000107000400068000200800700007501000080400109",
	"..6...94.9.....3....4.92...6.7.1..2.5.23.64.9.3..4.7.5...68.5....5.....4.98...1..",
	"002008050000040070480072000008000031600080005570000600000960048090020000030800900",
	"...16..2...2...8.5..5..36.9....5.18...........96.7....1.89..3..4.9...7...5..16...",
	"..6...1..35...2....946.8.....3.8...7.12.6.98.4...3.5.....9.486....8...59..8...4..",
	"3.4............8.99...6.5136.584..3..7.6.3.9..4..296.7589.7...64.2............9.4",
	"....4316..6....2..2.36.....1..4.6.2..5..2..1..7.8.5..4.....74.1..7....5..9153....",
	"28....473534827196.71.34.8.3..5...4....34..6.46.79.31..9.2.3654..3..9821....8.937",
	"..2.36..9.9.8.....8.3.925..2..6....1..7...4..6....8..5..428.1.6.....4.9.9..16.7..",
	".6.19.8..4.2.......8...3...7.8......93..4..87......3.9...3...4.......6.5..7.21.3.",
"..............3.85..1.2.......5.7.....4...1...9.......5......73..2.1........4...9",
"3.7.4...........918........4.....7.....16.......25..........38..9....5...2.6.....",
".......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...",
".......12....35......6...7.7.....3.....4..8..1...........12.....8.....4..5....6..",
	".1.....4.7...1....2...7..6..3...68....1...5....93...7..6..9...2....5...4.8.....1.",
	"..32......5....61...1.59.42.3.8.61.............71.3.9.61.32.7...75....6......75..",
".......12........3..23..4....18....5.6..7.8.......9.....85.....9...4.5..47...6...",
".2..5.7..4..1....68....3...2....8..3.4..2.5.....6...1...2.9.....9......57.4...9..",
"........3..1..56...9..4..7......9.5.7.......8.5.4.2....8..2..9...35..1..6........",
"12.3....435....1....4........54..2..6...7.........8.9...31..5.......9.7.....6...8",
"1.......2.9.4...5...6...7...5.9.3.......7.......85..4.7.....6...3...9.8...2.....1",
".......39.....1..5..3.5.8....8.9...6.7...2...1..4.......9.8..5..2....6..4..7.....",
"12.3.....4.....3....3.5......42..5......8...9.6...5.7...15..2......9..6......7..8",
"..3..6.8....1..2......7...4..9..8.6..3..4...1.7.2.....3....5.....5...6..98.....5.",
"1.......9..67...2..8....4......75.3...5..2....6.3......9....8..6...4...1..25...6.",
"..9...4...7.3...2.8...6...71..8....6....1..7.....56...3....5..1.4.....9...2...7..",
"....9..5..1.....3...23..7....45...7.8.....2.......64...9..1.....8..6......54....7",
"4...3.......6..8..........1....5..9..8....6...7.2........1.27..5.3....4.9........",
"7.8...3.....2.1...5.........4.....263...8.......1...9..9.6....4....7.5...........",

"........8..3...4...9..2..6.....79.......612...6.5.2.7...8...5...1.....2.4.5.....3",
"1.......2.9.4...5...6...7...5.3.4.......6........58.4...2...6...3...9.8.7.......1",
".....1.2.3...4.5.....6....7..2.....1.8..9..3.4.....8..5....2....9..3.4....67.....",
	"3.......8.5...2.7...9...4.....3.4.1.....9.....7.8.6.2...2...1...9.6.8.5.4.......7",
	"1....6..9.5.7.........3..4..7..4...5.......1.9.....6...4.1....8..8..2.7.6...9.2..",
	".615..97..27.4...535..76....43.....9.........6.....24....75..911...6.73..74..356.",
	"000080000001706800060502030047000310100000006085000720030901040009803200000050000",
	".743.2........5.4....6.79...56...79.3.......5.27...68...57.1....1.2........4.816.",
	"...63...55.4...9..8..4.....12..5.3..3.8.6.7.1..6.1..29.....9..4..3...2.72...71...",
	"...7.1...541.8.6........41..9.8...4..8....9.1...5....2.781.6..3.5...8.2421...9...",
	"9..24.....5.69.231.2..5..9..9.7..32...29356.7.7...29...69.2..7351..79.622.7.86..9",
	"..........5.16..8.6..8...4.9.5.7.4....341..754....6...7.....9545.9...32...29..6.."


    };
    for(auto test : tests){
	std::cout << test << '\n';
	board<sz> *b=new board<sz>(test);
	//b->set_strategy_sort_level("simple color",1);
	/*
	b->set_strategy_sort_level("hidden quad",1);
	b->set_strategy_sort_level("hidden triple",3);
	b->set_strategy_sort_level("hidden double",5);
	b->set_strategy_sort_level("hidden single",7);
	b->set_strategy_sort_level("naked single",9);
	b->set_strategy_sort_level("intersection",11);
	b->set_strategy_sort_level("naked double",6);
	//b->set_strategy_sort_level("hidden double",10);
	b->set_strategy_sort_level("naked triple",4);
	//b->set_strategy_sort_level("hidden triple",14);
	b->set_strategy_sort_level("naked quad",2);
	//b->set_strategy_sort_level("hidden quad",18);
	b->set_strategy_sort_level("x-wing",20);
	b->set_strategy_sort_level("y-wing",22);
	b->set_strategy_sort_level("swordfish",24);
	b->set_strategy_sort_level("jellyfish",26);
	b->set_strategy_sort_level("xy-chain",28);
	b->set_strategy_sort_level("simple color",28);
	*/
	b->print();
	std::cerr << "the board is " << (b->get_valid()==true?"":"not ") << "valid\n";
	std::cerr << "It has " << b->count() << " clues\n";
	b->print_large();
	b->heuristic_solution();
	b->print();
	b->print_large();
	std::cout << "count(): " << b->count() << '\n';

	if(!b->get_valid()){
	    std::cout << "bad puzzle\n";
	}else if(b->is_solved()){
	    std::cout << "valid solved puzzle\n";
	}else{
	    std::cout << "valid but not solved puzzle\n";
	}
	b->print_counts();
	//board<sz> *bf=new board<sz>(test);
	//board<sz> *bf=new board<sz>(tests[ctr]);
	//bf->brute_force_solution();
	//bf->print();
	delete b;
    }
    return 0;
}
