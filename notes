mt is a square member of type enum matched_type which is set to keep track of 
whether a squares val or pvals has been changed by a particular heuristic. It
works like a bitmap, so that more than one matched_type value can be set for
the same square

    enum matched_type{
	AM_NONE=0, AM_NAKED_DOUBLE=1, AM_HIDDEN_DOUBLE=2, AM_NAKED_TRIPLE=4,
	AM_HIDDEN_TRIPLE=8, AM_NAKED_QUAD=16, AM_HIDDEN_QUAD=32,
	AM_ROW_BLOCK_INTERSECTION=64, AM_COLUMN_BLOCK_INTERSECTION=128,
	AM_BLOCK_ROW_INTERSECTION=256, AM_BLOCK_COLUMN_INTERSECTION=512,
	AM_X_WING=1024, AM_SWORDFISH=2048, AM_JELLYFISH=4096, AM_Y_WING=8192
    };

mt is used to avoid the inefficiency of finding the same thing, e.g. the same 
hidden double, over and over and over again.  Instead, if nothing touches the
square in between, the square's mt will still have the AM_HIDDEN_DOUBLE bit
pulled up, so we'll skip it.  As soon as anything changes the pvals of the
square, the bits are all cleared in the square's mt so it will be looked at
again.  There's currently a problem with this, in that a square may validly be
part of more than one hidden double, i.e. one in a row with one square, and one
in a column with a different.  The second one will be missed.  In order to
avoid it, we would have to change mt to be a list of heuristics applied, each
with a list of the squares it was applied to.  We now make sure all of the
squares have AM_HIDDEN_DOUBLE for example up, but both could be parts of
unrelated hidden doubles on another axis.

mt set to and by:
    AM_NONE	square::set_val() if pval set to only be val
    AM_NONE	square::set_locked()
    AM_NONE	square:clear_pval_val if val actually cleared
    various	square::set_matched_type which sets AM_NONE if passed
		    in, or ors in anything else
    clears	clears a passed in bit of set
    AM_NONE	square::reset
    AM_NONE	square::square various
    other.mt	square::square(const square& other)
    other.mt	square::operator=(const square& other)
    AM_NONE	square::assign_pvals
    AM_NONE	square::clear_pvals

generate, brute_force_solution, dig_puzzle, and brute_force_check call square
routines to set values and pvals (pvals is short for Possible VALueS, vectors
holding information about the constraints for a square based on visible values
in other squares in the same row, column, or block), directly, but none of the
heuristics do.  The reason for this is twofold.  First, there are additional
data structures used by heuristics that are different ways of looking into the
pvals of the squares on the board. (More about this in a bit.)

Second, we keep a count of set squares on the board that is updated when
board::set_val is called.  It is a small savings, really, compared to counting
all the squares with values already set, but it is an easy efficiency.

The additional data structures are board level things that let any heuristic
look within any row, column, or block, by number, and get a vector of pointers
to the squares that have a particular val in their pvals.  If we didn't keep
this, several of the heuristics would have to generate the information for
themselves over and over again.  The redundancy would be less than elegant.

Instead, we generate the additional data structures for an initial puzzle after
all the initial pvals are set by calling board::update_possibilities, and then
as things are removed from pvals, we keep the additional data structures up to
date.  (N.B. after the initial pvals are set, you would never add to them, only
remove. This is because as a puzzle is being solved, set squares stay set, and
new squares getting set cause things to be removed from other square's pvals.
The brute force solver can't use the same things because it does backtracking and
values are often set and unset and reset to other values.)

The data structures are three, one each for rows, for columns, and for blocks.
They map the number of the row, column, or block to a map for the particular
row, or column or block.  The map you get back maps numbers 1-9 to lists
of squares in that particular row, column or block that have that number in
their pvals.  An example is that if we wanted to find out if row 3 had only
one square with a possible value of 7, we coud do:

if(row_possibilities[3][7].size()==1)
    row_possibilities[3][7][0]->set_val(1);

(In reality things like this are generalized in loops.)

In order to avoid having to generate these data structures over and over again,
we make wrappers in the board class around the square's routines, and call the
wrappers instead.  That way we can keep our auxiliary data structures
inexpensively correct as we go along.

square::set_val
    board::set_val
    board::generate (it sets the square count to N*N at exit)
    board::dig_puzzle (although it calls count at exit to make count correct)
    board::brute_force_solution (sets square count to N*N at exit)
    board::brute_force_check (doesn't affect board, works on copy)
board::set_val
    naked_single::apply
    hidden_single::apply
    board::board();

square::clear_pval_val(size_t in_val)
    board::clear_pval_val
    board::generate
    board::brute_force_check
    board::brute_force_solution
board::clear_pval_val(size_t row, size_t col, size_t in_val)
    y_wing_apply when y_wing found to clear shared val from all shared neighbors
    board::purge_block_except
    board::purge_row_except
    board::purge_column_except
    board::purge_set
    board::reduce_to_set
    board::update_pvals_for_square
    board::purge_row_col_sets

reduce_to_set - given a set of squares and a set of vals, removes from the
	square's pvals, anything NOT in vals
purge_from_set - given a set of squares, and a set of vals, discerns the
	groups the squares are in, i.e. row, column, and/or block, and 
	strips from all squares in the group that are NOT in the square set
	all the values in the val set.
purge_block_except - given a block number, a vector of squares and a val, walk
	through all the squares in the block and if they are not in the vector
	of squares, remove val from their pvals.  This is used from intersection.
purge_row_except - same as above except for row, not block
purge_column_except - same as above except for column
purge_set -given a row and column and a set of values, purge all of those
	values from the pvals of the square at that row and column.
update_pvals_for_square given a row and column, remove the val set in the
	square at that row and column from every other square that shares a
	row, column, or block with the square at the row and column
purge_row_col_sets - given a group type, either GT_ROW or GT_COLUMN, a set of
	row numbers, and a set of column numbers, remove from the appropriate
	squares the value.  Appropriate is determined as follows:
	if group type is GT_ROW, for each column in colset, walk the rows
	0-N and if the row is NOT in rowset, remove val from the pvals of the
	square at row and column.  Conversely for group type of GT_COLUMN.


  0 1 2 3 4 5 6 7 8
0 . . . . . . . . . (7,3) reflected across main diagonal yields (3,7)
1 . . . . . . . . . or (r,c) yields (c,r)
2 . . . . . . . . .
3 . . . . . . . @ .
4 . . . . . . . . . 
5 . . . . . . . . .
6 . . . . . . . . .
7 . . . * . . . . . * - original point
8 . . . . . . . . . @ - point reflected about main diagonal

  0 1 2 3 4 5 6 7 8
0 . . . . . . . . . (7,3) reflected across anti-diagonal yields (5,1)
1 . . . . . . . . . or (r,c) yields (N'-c,N'-r)
2 . . . . . . . . .
3 . . . . . . . . .
4 . . . . . . . . .
5 . # . . . . . . .
6 . . . . . . . . .
7 . . . * . . . . .
8 . . . . . . . . .

  0 1 2 3 4 5 6 7 8
0 . . . . . . . . . (7,3) and main diag reflection (5,1) reflected across
1 . . . . . % . . . anti-diagonal yields (3,7) as before for the original
2 . . . . . . . . . point, and (1,5) for the reflection of the main point,
3 . . . . . . . @ . so we have (r,c), (N'-c,N'-r), (c,r), and (N'-r,N'-c)
4 . . . . . . . . . (7,3), (5,1), (3,7), (1,5)ZZ
5 . # . . . . . . .
6 . . . . . . . . .
7 . . . * . . . . .
8 . . . . . . . . .
